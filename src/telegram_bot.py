import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BotCommand
from aiogram.filters import Command
from datetime import datetime, timedelta
import pytz
import asyncio

import src.config as config
from src.data_processor import DataProcessor

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, token, data_processor):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.data_processor = data_processor
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_daily, Command("daily"))
        self.dp.message.register(self.cmd_period, Command("period"))
        self.dp.message.register(self.cmd_project, Command("project"))
        self.dp.message.register(self.cmd_test, Command("test"))
        self.dp.message.register(self.cmd_secondary, Command("secondary"))
        self.dp.callback_query.register(self.callback_handler)  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π

        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        self.inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞", callback_data="daily")],
            [InlineKeyboardButton(text="üìä –î–æ–ø. –æ—Ç—á–µ—Ç", callback_data="secondary")],
            [
                InlineKeyboardButton(text="üìÖ –û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data="show_periods"),
                InlineKeyboardButton(text="üìÇ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É", callback_data="show_projects")
            ]
        ])

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏
        self.periods_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="period_week")],
            [InlineKeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")],
            [InlineKeyboardButton(text="–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="period_all")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        self.projects_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="[–ü1] –ü—Ä–æ–µ–∫—Ç 1", callback_data="project_–ü1")],
            [InlineKeyboardButton(text="[–ü37] –ü—Ä–æ–µ–∫—Ç 37", callback_data="project_–ü37")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
        self.last_report_date = None

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.dp.message()
        async def message_handler(message: Message):
            logger.info(f"Message from chat: {message.chat.id}")
            logger.info(f"Chat type: {message.chat.type}")
            logger.info(f"Full message info: {message.dict()}")

    async def cmd_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=self.inline_kb
        )

    async def callback_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
        if callback.data == "daily":
            await self.cmd_daily(callback.message)
        elif callback.data == "secondary":
            await self.cmd_secondary(callback.message)
        elif callback.data == "show_periods":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤–≤–æ–¥—É –ø–µ—Ä–∏–æ–¥–∞
            text = (
                "üìÖ *–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`/period 14.10-20.10`\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Å 14.10.2024"
            )
            await callback.message.edit_text(text, parse_mode="Markdown")

        elif callback.data == "show_projects":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤–≤–æ–¥—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
            text = (
                "üìÇ *–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`/project [–ü1] 14.10-20.10`\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Å 14.10.2024"
            )
            await callback.message.edit_text(text, parse_mode="Markdown")

        elif callback.data == "back_to_main":
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
                reply_markup=self.inline_kb
            )

        await callback.answer()

    async def cmd_daily(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /daily"""
        result = self.data_processor.generate_daily_report()
        
        if result['success']:
            verified_status = "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ" if result['verified'] else "‚ùå –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
            text = config.MESSAGES['DAILY_REPORT'].format(
                date=result['date'],
                records=result['records'],
                deposit=result.get('deposit', 0),
                verified=verified_status
            )
            await message.answer(text, parse_mode="Markdown")
        else:
            await message.answer(result['error'])

    async def cmd_period(self, message: Message, period_str=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        if not period_str:
            args = message.text.split()[1:]
            if not args:
                await message.reply(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /period 01.11-30.11",
                    parse_mode="Markdown"
                )
                return
            period_str = args[0]

        result = self.data_processor.generate_period_report(period_str)
        if result['success']:
            text = config.MESSAGES['PERIOD_REPORT'].format(
                start_date=result['start_date'],
                end_date=result['end_date'],
                total_records=result['total_records'],
                warning=result.get('warning', '')
            )
        else:
            text = f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
        
        await message.reply(text, parse_mode="Markdown")

    async def cmd_project(self, message: Message, project=None, period=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É"""
        if not project or not period:
            args = message.text.split()[1:]
            if len(args) < 2:
                await message.reply(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "
                    "/project [–ü1] 01.11-30.11",
                    parse_mode="Markdown"
                )
                return
            project = args[0]
            period = args[1]

        result = self.data_processor.generate_project_report(project, period)
        if result['success']:
            text = config.MESSAGES['PROJECT_REPORT'].format(
                project=result['project_name'],
                start_date=result['start_date'],
                end_date=result['end_date'],
                records=result['total_records'],
                warning=result.get('warning', '')
            )
        else:
            text = f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
        
        await message.reply(text, parse_mode="Markdown")

    async def cmd_test(self, message: Message):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞"""
        chat_id = message.chat.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –≥—Ä—É–ø–ø—É
        try:
            await self.bot.send_message(
                chat_id=config.GROUP_CHAT_ID,
                text=f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É\nChat ID –≥—Ä—É–ø–ø—ã: {config.GROUP_CHAT_ID}"
            )
            await message.reply(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É\nID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞: {chat_id}")
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}\nID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞: {chat_id}")

    async def cmd_secondary(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /secondary"""
        result = self.data_processor.generate_secondary_report()
        
        if result['success']:
            try:
                text = config.MESSAGES['SECONDARY_REPORT'].format(
                    date=result['date'],
                    projects_data=result['projects_data']
                )
                await message.answer(text, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"Error with Markdown formatting: {e}")
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                text = text.replace('*', '').replace('_', '').replace('`', '')
                await message.answer(text)
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: {result['error']}")

    async def set_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
        commands = [
            BotCommand(command="start", description="üîÑ –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="daily", description="üìä –û—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞"),
            BotCommand(command="period", description="üìÖ –û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥"),
            BotCommand(command="project", description="üìÇ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É"),
            BotCommand(command="secondary", description="üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
        ]
        await self.bot.set_my_commands(commands)

    async def check_and_send_reports(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –≤—Ç–æ—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        now = datetime.now(pytz.timezone(config.REPORT_TIME['TIMEZONE']))
        current_date = now.date()

        if (now.hour == config.REPORT_TIME['HOUR'] and 
            now.minute == config.REPORT_TIME['MINUTE'] and
            (self.last_report_date is None or self.last_report_date < current_date)):
            
            try:
                logger.info(f"Attempting to send secondary report at {now}")
                
                # –û—Ç—á–µ—Ç –ø–æ –≤—Ç–æ—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ
                result_secondary = self.data_processor.generate_secondary_report()
                if result_secondary['success']:
                    text_secondary = config.MESSAGES['SECONDARY_REPORT'].format(
                        date=result_secondary['date'],
                        projects_data=result_secondary['projects_data']
                    )
                    try:
                        await self.bot.send_message(
                            chat_id=config.GROUP_CHAT_ID,
                            text=text_secondary,
                            parse_mode="Markdown"
                        )
                        logger.info("Secondary report sent successfully")
                    except Exception as e:
                        logger.error(f"Error sending secondary report: {e}")
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        await self.bot.send_message(
                            chat_id=config.GROUP_CHAT_ID,
                            text=text_secondary.replace('*', '').replace('_', '').replace('`', '')
                        )
                        logger.info("Secondary report sent without formatting")

                self.last_report_date = current_date
                logger.info(f"Secondary report sent successfully at {now}")
                
            except Exception as e:
                logger.error(f"Error sending secondary report: {e}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Bot started...")
        try:
            await self.set_commands()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            asyncio.create_task(self.check_reports_periodically())
            logger.info("Periodic check task started")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
            await self.dp.start_polling(self.bot)
        finally:
            await self.bot.session.close()

    async def check_reports_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"""
        while True:
            await self.check_and_send_reports()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 55 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(55) 